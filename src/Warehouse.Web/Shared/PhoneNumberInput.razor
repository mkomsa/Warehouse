@inject IJSRuntime JSRuntime

<input @ref="phoneInput" type="text" class="form-control" value="@Value" @oninput="async e => await FormatPhoneNumber(e)" />

@code {
    private ElementReference phoneInput;

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("formatPhoneNumber", phoneInput);
        }
    }

    private async Task FormatPhoneNumber(ChangeEventArgs e)
    {
        var input = e.Value.ToString().Replace("-", "").Replace(" ", "");
        
        if (input.Length <= 3)
        {
            Value = input;
        }
        else if (input.Length <= 6)
        {
            Value = $"{input.Substring(0, 3)}-{input.Substring(3)}";
        }
        else if (input.Length <= 10)
        {
            Value = $"{input.Substring(0, 3)}-{input.Substring(3, 3)}-{input.Substring(6)}";
        }
        else
        {
            Value = $"{input.Substring(0, 3)}-{input.Substring(3, 3)}-{input.Substring(6, 4)}";
        }

        await ValueChanged.InvokeAsync(Value);
    }
}