@page "/order/{orderId:guid}"
@using Warehouse.Core.Orders.Models
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation

<h3>Order Details</h3>

@if (order == null)
{
    <p><em>Loading...</em></p>
}

@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}

else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="GoBack">Go Back</button>
        <button class="btn btn-info ml-2" @onclick="ShowChangeStatusModal">Change Status</button>
    </div>

    <div class="card mb-3">
        <div class="card-header">
            Customer Information
        </div>
        <div class="card-body">
            <p><strong>Name:</strong> @order.Customer.Name</p>
            <p><strong>Email:</strong> @order.Customer.Email</p>
            <p><strong>Phone:</strong> @order.Customer.PhoneNumber</p>
        </div>
    </div>

    <h4>Products</h4>
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Manufacturer</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in order.Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Manufacturer.Name</td>
                    <td>@product.Price.ToString("C")</td>
                </tr>
            }
            <tr>
                <td colspan="2"><strong>Total</strong></td>
                <td>@order.Products.Sum(p => p.Price).ToString("C")</td>
            </tr>
        </tbody>
    </table>

    <div class="mt-3">
        <button class="btn btn-danger" @onclick="ShowDeleteConfirmation">Delete Order</button>
    </div>

    @if (showConfirmationModal)
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal fade show" tabindex="-1" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmation</h5>
                        <button type="button" class="close" @onclick="HideDeleteConfirmation">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this order?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmation">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteOrderConfirmed">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@if (showStatusModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Status</h5>
                    <button type="button" class="close" @onclick="HideChangeStatusModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="statusSelect">Select Status:</label>
                        <select class="form-control" id="statusSelect" @bind="selectedStatus">
                            @foreach (var status in statusOptions)
                            {
                                <option value="@status">@status</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideChangeStatusModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="ChangeOrderStatus">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public Guid OrderId { get; set; }

    private Order order;
    private bool showStatusModal = false;
    private bool showConfirmationModal = false;
    private string selectedStatus;
    private readonly string[] statusOptions = { "Created", "Processing", "Shipped", "Delivered", "Canceled" };
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetails();
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            HttpClient httpClient = ClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

            order = await httpClient.GetFromJsonAsync<Order>($"https://localhost:7125/api/orders/{OrderId}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching order details: {ex.Message}";
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/orders");
    }

    private void ShowChangeStatusModal()
    {
        showStatusModal = true;
    }

    private void HideChangeStatusModal()
    {
        showStatusModal = false;
    }

    private async Task ChangeOrderStatus()
    {
        try
        {
            order.Status = selectedStatus;

            HttpClient httpClient = ClientFactory.CreateClient();
            //httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            string jsonContent = JsonSerializer.Serialize(selectedStatus);
            HttpContent content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await httpClient.PatchAsync($"https://localhost:7125/api/orders/{OrderId}/change-status", content);
            showStatusModal = false;

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/orders");
            }
        }
        catch(Exception ex)
        {
            errorMessage = $"Error changing order status: {ex.Message}";
        }
    }

    private void ShowDeleteConfirmation()
    {
        showConfirmationModal = true;
    }

    private void HideDeleteConfirmation()
    {
        showConfirmationModal = false;
    }

    private async Task DeleteOrderConfirmed()
    {
        try
        {
            HttpClient httpClient = ClientFactory.CreateClient();
            HttpResponseMessage response = await httpClient.DeleteAsync($"https://localhost:7125/api/orders/{OrderId}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Order deleted successfully.");
                Navigation.NavigateTo("/orders"); // Redirect to orders list or another appropriate page
            }
            else
            {
                errorMessage = $"Order delete failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Order delete failed. {ex.Message}";
        }
        finally
        {
            showConfirmationModal = false; // Ensure modal is closed after deletion attempt
        }
    }
}
