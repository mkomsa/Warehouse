@page "/create-order"
@using Warehouse.Core.Orders.Models
@using Warehouse.Core.Products.Models
@using Warehouse.Core.Addresses.Models
@using Warehouse.Core.Customers.Models
@using Warehouse.Core.Invoices.Models
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<h3 class="display-6 mb-4">Create Order</h3>

@* @if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
} *@

<form @onsubmit="Create">
    <div class="container-fluid">
        <div class="row">
            <!-- Left Column -->
            <div class="col-md-4">
                <div class="form-group mb-2">
                    <label for="customerName">Name:</label>
                    <input type="text" class="form-control" id="customerName" @bind="order.Customer.Name">
                </div>
                <div class="form-group mb-2">
                    <label for="customerEmail">Customer Email:</label>
                    <input type="email" class="form-control" id="customerEmail" @bind="order.Customer.Email">
                </div>
                <div class="form-group mb-2">
                    <label for="customerPhoneNumber">Phone Number:</label>
                    <input type="text" class="form-control" id="customerPhoneNumber" oninput="formatPhoneNumber(this)" @bind="order.Customer.PhoneNumber" maxlength="12">
                </div>
                <script>
                    function formatPhoneNumber(input) {
                        let phoneNumber = input.value.replace(/\D/g, '');

                        if (phoneNumber.length > 3) {
                            phoneNumber = phoneNumber.substring(0, 3) + '-' + phoneNumber.substring(3);
                        }

                        if (phoneNumber.length > 7) {
                            phoneNumber = phoneNumber.substring(0, 7) + '-' + phoneNumber.substring(7, 11);
                        }

                        input.value = phoneNumber;
                    }
                </script>
            </div>
            <!-- Middle Column -->
            <div class="col-md-4">
                <div class="form-group mb-2">
                    <label for="postalCode">Postal Code:</label>
                    <input type="text" class="form-control" id="postalCode" @bind="order.Address.PostalCode">
                </div>
                <div class="form-group mb-2">
                    <label for="street">Street:</label>
                    <input type="text" class="form-control" id="street" @bind="order.Address.Street">
                </div>
                <div class="form-group mb-2">
                    <label for="apartment">Apartment:</label>
                    <input type="text" class="form-control" id="apartment" @bind="order.Address.Apartment">
                </div>
            </div>
            <!-- Right Column -->
            <div class="col-md-4">
                <div class="form-group mb-2">
                    <label for="grossValue">Gross Value:</label>
                    <input type="number" class="form-control short-input" id="grossValue" @bind-value="FormattedGrossValue" @bind-value:event="oninput" step="0.01" readonly>
                </div>
                <div class="form-group mb-2">
                    <label for="vatRate">Vat Rate:</label>
                    <input type="number" class="form-control short-input" id="vatRate" value="23" readonly>
                </div>
                <div class="form-group mb-2">
                    <label for="netValue">Net Value:</label>
                    <input type="number" class="form-control short-input" id="netValue" @bind-value="FormattedNetValue" @bind-value:event="oninput" step="0.01">
                </div>
            </div>
        </div>
    </div>

    <style>
        .short-input {
            max-width: 300px;
        }
    </style>

    <div class="album py-3 px-1 bg-info-subtle" style="border-radius: 10px;">
        <h3 class="display-6 mb-4">Products</h3>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 row-cols-xxl-6">
            @foreach (var product in products)
            {
                Random rand = new Random();
                int id = rand.Next(1, 200);

                string imageUrl = $"https://picsum.photos/id/{id}/75/75";
                <div class="col mb-3">
                    <div class="card h-100">
                        <img src="@imageUrl" class="card-img-top" alt="@product.Price" style="object-fit:fill">
                        <div class="card-body d-flex flex-column">
                            <h6 class="card-title">@product.Manufacturer.Name</h6>
                            <p class="card-text">$ @product.Price.ToString("0.0")</p>
                            <button class="btn btn-primary btn-sm mt-auto" @onclick="() => AddToOrder(product)">Add to Order</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@code {

    private Order order = new()
    {
        Id = Guid.NewGuid(),
        Address = new Address(),
        Customer = new Customer()
        {
            Address = new Address()
        },
        Invoice = new Invoice(),
        Products = new List<Product>()
    };

    private List<Product> products = new();
    private string errorMessage;

    private string FormattedGrossValue
    {
        get => order.Invoice.GrossValue.ToString("0.00");
        set => order.Invoice.GrossValue = double.TryParse(value, out var result) ? result : order.Invoice.GrossValue;
    }

    private string FormattedNetValue
    {
        get => order.Invoice.NetValue.ToString("0.00");
        set => order.Invoice.NetValue = double.TryParse(value, out var result) ? result : order.Invoice.NetValue;
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await HttpClient.GetFromJsonAsync<List<Product>>("https://localhost:7125/api/product");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while fetching products: {ex.Message}";
        }
    }

    private void AddToOrder(Product product)
    {
        order.Products.Add(product);
        order.Invoice.GrossValue += product.Price;
        CalculateNetValue();
    }

    private void CalculateNetValue()
    {
        order.Invoice.NetValue = order.Invoice.GrossValue / (1 + (order.Invoice.VatRate / 100));
    }

    private async Task Create()
    {
        try
        {
            // Set transaction date to DateTime.UtcNow
            order.Invoice.TransactionDate = DateTime.UtcNow;
            order.Invoice.VatRate = 23;
            order.Invoice.Status = "true";
            order.Customer.FullName = order.Customer.Name;
            order.Customer.Address.Street = order.Address.Street;
            order.Customer.Address.Apartment = order.Address.Apartment;
            order.Customer.Address.PostalCode = order.Address.PostalCode;

            var response = await HttpClient.PostAsJsonAsync("https://localhost:7125/api/order", order);

            // Check if request was successful
            if (response.IsSuccessStatusCode)
            {
                // Redirect to orders page
                Navigation.NavigateTo("/orders");
            }
            else
            {
                errorMessage = "Failed to create order. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
